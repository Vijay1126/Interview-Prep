class ListNode:
    def __init__(self,x):
        self.val = x
        self.next = None
        self.prev = None

class MyLinkedList:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.length = 0
        self.head,self.tail = ListNode(0), ListNode(0)
        self.head.next = self.tail
        self.tail.prev = self.head
        
        

    def get(self, index: int) -> int:
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        """
        if index<0 or index>=self.length:
            return -1
        if index+1<self.length-index:
            curr = self.head
            for _ in range(index+1):
                curr = curr.next
            return curr.val
        else:
            curr = self.tail
            for _ in range(self.length-index):
                curr =curr.prev
            
            return curr.val
        

    def addAtHead(self, val: int) -> None:
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        """
        self.length+=1
        toAdd = ListNode(val)
        prev,curr = self.head, self.head.next
        toAdd.next, toAdd.prev = curr, prev
        
        prev.next,curr.prev = toAdd, toAdd
        
        
        

    def addAtTail(self, val: int) -> None:
        """
        Append a node of value val to the last element of the linked list.
        """
        self.length+=1
        toAdd = ListNode(val)
        
        prev,curr = self.tail.prev, self.tail
        toAdd.next, toAdd.prev = curr, prev
        prev.next,curr.prev = toAdd, toAdd
        
        

    def addAtIndex(self, index: int, val: int) -> None:
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        """
        if index>self.length:
            return 
        elif index<0:
            index = 0
        else:
            if index<self.length-index:
                prev = self.head
                for i in range(index):
                    prev = prev.next
                curr = prev.next
            else:
                curr = self.tail
                for i in range(self.length-index):
                    curr = curr.prev
                prev = curr.prev
            self.length+=1
            
            toAdd = ListNode(val)
 
            toAdd.next, toAdd.prev = curr, prev
            prev.next = toAdd
            curr.prev = toAdd
            
            

    def deleteAtIndex(self, index: int) -> None:
        """
        Delete the index-th node in the linked list, if the index is valid.
        """
        if index<0 or index>=self.length:
            return 
        
        else:
            if index<self.length-index:
                prev = self.head
                for _ in range(index):
                    prev = prev.next
                curr = prev.next.next
                
            else:
                curr = self.tail
                for _ in range(self.length-index-1):
                    curr =curr.prev
                prev = curr.prev.prev
            
            prev.next = curr
            curr.prev = prev
            self.length -=1
        


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
