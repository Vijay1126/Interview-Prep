"""
# Definition for a Node.
class Node:
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""

class Solution:   
    def flatten(self, head: 'Node') -> 'Node':
        
            if head is None:
                return head
            stack = [head]
            currNode = head
            dummy = Node(0,None,None,None)
            dummy.next = currNode
            parent = dummy
            while stack:
                poppedNode = stack.pop()
                
                prevNode = parent
                prevNode.next = poppedNode
                poppedNode.prev = prevNode
                currNode = poppedNode
                
                while currNode is not None:
                    while(currNode and currNode.child is None):
                        parent = currNode
                        currNode = currNode.next
                    if currNode:
                        if currNode.next:
                            stack.append(currNode.next)
                        nextNode = currNode.child
                        currNode.next = nextNode
                        nextNode.prev = currNode
                        currNode.child = None
                        parent = currNode
                        currNode = currNode.next
            head.prev = None

            return head
