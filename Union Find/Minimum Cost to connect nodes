class Solution:
    def minimumCost(self, N: int, connections: List[List[int]]) -> int:
        
        graph = defaultdict(list)
        
        for a,b,cost in connections:
            graph[a].append((b,cost))
            graph[b].append((a,cost))
        print(graph)
        stack = []
        totalCost = 0
        seen = set()
        heappush(stack, (0,1))
        while stack:
            currCost, currNode = heappop(stack)
            print(currCost)
            if currNode in seen:
                continue
            seen.add(currNode)
            totalCost+=currCost
            for node, cost in graph[currNode]:
                if node in seen:
                    continue
                heappush(stack, (cost, node))
            
        return totalCost if len(seen)==N else -1
        
        
        class Solution:
    def minimumCost(self, N: int, connections: List[List[int]]) -> int:
        
        city = list(range(N+1))
        
        
        def find(num):
            parent = city[num]
            if city[num]!=num:
                parent = find(city[num])
            return parent
            
        def union(a,b):
            city[find(a)] = b
        cost = 0
        for a, b, currCost in sorted(connections, key= lambda x: x[2]):
            if find(a) == find(b):
                continue
            else:
                union(a,b)
                cost += currCost
        
        length = len(set([find(i) for i in range(1,N+1)]))
        return cost if length == 1 else -1
    
        
