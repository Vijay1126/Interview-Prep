class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        fresh = 0
        rotten = deque()
        def helper(i, j):
            nonlocal fresh
            if 0<=i<len(grid) and 0<=j<len(grid[0]) and grid[i][j]==2:
                if i+1<len(grid) and grid[i+1][j]==1:
                    rotten.append([i+1,j])
                    grid[i+1][j]=2
                    fresh-=1
                if j+1<len(grid[0]) and grid[i][j+1]==1:
                    rotten.append([i,j+1])
                    grid[i][j+1]=2
                    fresh-=1
                if i-1>=0 and grid[i-1][j]==1:
                    rotten.append([i-1,j])
                    grid[i-1][j]=2
                    fresh-=1
                if j-1>=0 and grid[i][j-1]==1:
                    rotten.append([i,j-1])
                    grid[i][j-1]=2
                    fresh-=1
            return
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==1:
                    fresh+=1
                elif grid[i][j]==2:
                    rotten.append([i,j])
        
        steps = 0
        directions = [[i+1,j],[i-1,j],[i,j+1],[i,j-1]]
        while rotten and fresh>0:
            steps +=1
            print(rotten)
            for i in range(len(rotten)):
                i,j = rotten.popleft()
                helper(i,j)
        
        return steps if fresh==0 else -1
        
        
        
            
