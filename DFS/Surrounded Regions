class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        if not board:
            return board
        rows = len(board)
        cols = len(board[0])
        def dfs(i,j):
                if board[i][j]=='O':
                    board[i][j]='*'
                    if i<rows-1:
                        dfs(i+1,j)
                    if j<cols-1:
                        dfs(i,j+1)
                    if i>0:
                        dfs(i-1,j)
                    if j>0:
                        dfs(i,j-1)
                        
                    
        for i in range(rows):
            for j in range(cols):
                    #only the boundaries
                if i==0 or j==0 or i==rows-1 or j==cols-1:
                    if board[i][j]=='O':
                        print("Enter")
                        dfs(i,j)
        for i in range(rows):
            for j in range(cols):
                if board[i][j]=='*':
                    board[i][j] = 'O'
                elif board[i][j]=='O':
                    board[i][j] = 'X'
                    
                    
                
        return board
