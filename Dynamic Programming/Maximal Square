class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        if not matrix: 
            return 0
        rows = len(matrix)
        cols = len(matrix[0])
        memo = [[-1 for _ in range(cols)] for _ in range(rows)]

        def helper(i,j):
            if 0<=i<rows and 0<=j<cols:
                if memo[i][j]!=-1:
                    return memo[i][j]
                elif matrix[i][j]=='1':
                    memo[i][j] = min(helper(i+1,j), helper(i+1,j+1), helper(i,j+1))+1
                else:
                     memo[i][j] = 0
                return memo[i][j]
            return 0

            
            
 
        ans = 0
        for i in range(rows):
            for j in range(cols):
                if matrix[i][j]=='1':
                    ans = max(helper(i,j),ans)
   
        return ans**2
                
                
        class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        if not matrix: 
            return 0
        rows = len(matrix)
        cols = len(matrix[0])
        dp = [[0 for _ in range(cols+1)] for _ in range(rows+1)]

        ans = 0
        for i in range(1, rows+1):
            for j in range(1, cols+1):
                if matrix[i-1][j-1]=='1':
                    dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1])+1
                    ans = max(ans, dp[i][j])
        
        return ans**2
                
