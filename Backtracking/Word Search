class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        
        cols = len(board[0])
        rows = len(board)
        
        def wordFinder(i,j,currStr):
            if len(currStr) == 0:
                return True
            
            if i<0 or j<0 or i==rows or j ==cols or board[i][j]!=currStr[0]:
                return False
            
            board[i][j]="#"
            found = False
            for rowOffset, colOffset in [(0,1),(1,0),(-1,0),(0,-1)]:
                found = wordFinder(i+rowOffset,j+colOffset,currStr[1:])
                if found:
                    break
            board[i][j]=currStr[0]
            
            return found
                
            
        
        currStr = word
        for i in range(rows):
            for j in range(cols):
                  if wordFinder(i,j,currStr):
                        return True
            
        return False
        
        
   The complexity will be 𝑂(m*n*4**𝑠) where m is the no. of rows and n is the no. of columns in the 2D matrix and s is the length of the input string.

When we start searching from a character we have 4 choices of neighbors for the first character and subsequent characters have only 3 or less than 3 choices but we can take it as 4 (permissible slopiness in upper bound). This slopiness would be fine in large matrices. So for each character we have 4 choices. Total no. of characters are 𝑠 where s is the length of the input string. So one invocation of search function of your implementation would take 𝑂(4𝑠) time.

Also in worst case the search is invoked for 𝑚∗𝑛 times. So an upper bound would be 𝑂(𝑚∗𝑛∗4𝑠).
                    
        
                        
