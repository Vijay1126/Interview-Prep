class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        
        if(not digits):
            return(None)
        
        dict = { '2': ['a','b','c'],
                 '3': ['d','e','f'],
                 '4': ['g','h','i'],
                 '5': ['j','k','l'],
                 '6': ['m','n','o'],
                 '7': ['p','q','r','s'],
                 '8': ['t','u','v'],
                 '9': ['w','x','y','z']
                }
        result = []
        def backtracking(digits, currCharacter):
            if len(digits)==0:
                result.append(currCharacter)
                
            else:
                for char in dict[digits[0]]:
                    backtracking(digits[1:],currCharacter+char)
            return result
        return backtracking(digits,"")
            
