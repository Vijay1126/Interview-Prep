# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        
        def reverse(node,k):
            prev = None
            curr = node
            while k:
                curr.next, prev, curr = prev, curr, curr.next
                k-=1
            return prev
        
        count = 0
        pointer = head
        
        while count<k and pointer is not None:
            pointer = pointer.next
            count+=1
            
        if count==k:
            reversedHead = reverse(head,k)
            
            head.next = self.reverseKGroup(pointer,k)
            return reversedHead
        return head
        
                    
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        connector = dummy = ListNode(0)
        connector.next = head
        l = r = head
        prev, curr = ListNode(), ListNode()
        while True:
            count = 0
            
            while r is not None and count<k:
                r = r.next
                count+=1
            if count==k:
                #reverse the list
                prev,curr = r,l
                #here the prev is the start of the next k since we want our reversed                        list to point to prev - usually None in the general case
  
                for _ in range(k):
                    curr.next, curr , prev = prev, curr.next, curr
   
                #connect the k groups
                # we need to connect the current "prev" which points to the head
                #of the reversed list to the connector
                connector.next = prev
                #this is the new connector - l because - reversed
                connector = l
                #new l will the started of the next k group
                l = r
            
            else:
                return dummy.next
