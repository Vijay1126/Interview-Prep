# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        
        def reverse(node,k):
            prev = None
            curr = node
            while k:
                curr.next, prev, curr = prev, curr, curr.next
                k-=1
            return prev
        
        count = 0
        pointer = head
        
        while count<k and pointer is not None:
            pointer = pointer.next
            count+=1
            
        if count==k:
            reversedHead = reverse(head,k)
            
            head.next = self.reverseKGroup(pointer,k)
            return reversedHead
        return head
        
                    
