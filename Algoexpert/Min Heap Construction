# Do not edit the class below except for the buildHeap,
# siftDown, siftUp, peek, remove, and insert methods.
# Feel free to add new properties and methods to the class.
class MinHeap:
    def __init__(self, array):
        # Do not edit the line below.
        self.heap = self.buildHeap(array)

    def buildHeap(self, array):
        lastParentIndex = (len(array)-2)//2
		for i in reversed(range(lastParentIndex+1)):
			self.siftDown(i, len(array)-1, array)
		return array
			
    def siftDown(self, currIndex, endIndex, array):
        # Write your code here.
        leftChild = currIndex*2+1
		while leftChild<=endIndex:
			rightChild = currIndex*2+2 if currIndex*2+2<=endIndex else -1
		
			if rightChild!=-1 and array[rightChild] < array[leftChild]:
				indexToSwap = rightChild
			else:
				indexToSwap = leftChild
			print(indexToSwap, currIndex)
			
			if array[indexToSwap]<array[currIndex]:
				self.swap(currIndex,indexToSwap,array)
				currIndex = indexToSwap
				leftChild = currIndex*2+1
			else:
				break
				
				
    def siftUp(self, currIndex, array):
		currParent = (currIndex-1)//2
		while currIndex>0 and array[currParent]>array[currIndex] :
			self.swap(currParent, currIndex, array)
			currIndex = currParent
			currParent = (currIndex-1)//2
			
		
    def peek(self):
        return self.heap[0]

    def remove(self):
        self.swap(0, len(self.heap)-1, self.heap)
		valueToRemove = self.heap.pop()
		self.siftDown(0, len(self.heap)-1,self.heap)
		return valueToRemove

    def insert(self, value):
        self.heap.append(value)
		self.siftUp(len(self.heap)-1, self.heap)
		
	def swap(self, i, j, heap):
		heap[i], heap[j] = heap[j], heap[i]
		
