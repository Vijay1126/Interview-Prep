def knapsackProblem(items, capacity):

	lookupArray = [[0 for i in range((capacity)+1)] for i in range(len(items)+1)]
	capacityArray = [i for i in range(capacity+1)]
	
	for i in range(1, len(items)+1):

		currVal, currWeight = items[i-1]
	
		for j in range(0, capacity+1):

			if currWeight>j:
				lookupArray[i][j] = lookupArray[i-1][j]
			else:
				lookupArray[i][j] = max(lookupArray[i-1][j], lookupArray[i-1][j-currWeight]+currVal)
	
	return([lookupArray[-1][-1],buildIndex(lookupArray,items)])

def buildIndex(lookupArray, items):
	output = []
	i = len(lookupArray)-1
	j = len(lookupArray[0])-1
	
	while i>0:
		
		if lookupArray[i][j] == lookupArray[i-1][j]:
			i-=1
		else:
			output.append(i-1)
			i = i-1
			j = j-items[i][1]
			
		if j ==0:
			break
	return list(reversed(output))
	
				
			
		
			
