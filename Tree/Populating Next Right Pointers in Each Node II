class Solution:
    def connect(self, root: 'Node') -> 'Node':
        start = root
        node = level = Node(None)
        while root:
            while root:
                if root.left:
                    node.next = root.left
                    node = node.next
                if root.right:
                    node.next = root.right
                    node = node.next
                root = root.next
            root, node = level.next, level
            node.next = None
        return start


"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        
        deq = deque([root])
        if not root:
            return root 
        while deq:
            size = len(deq)
            
            for i in range(size):
                node = deq.popleft()
                if i!=size-1:
                    node.next = deq[0]

                if node.left:
                    deq.append(node.left)
                if node.right:
                    deq.append(node.right)
                    
        return root
                    
                
                
                
