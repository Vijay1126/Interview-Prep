# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator:

    def __init__(self, root: TreeNode):
        
        stack = []
        node = root
        self.output = []
        while stack or node:
            while node is not None:
                stack.append(node)
                node = node.left
                
            node = stack.pop()
            self.output.append(node.val)
            node = node.right
        self.iterator = 0

    def next(self) -> int:
        """
        @return the next smallest number
        """
        value = self.output[self.iterator]
        self.iterator+=1
        return value
        

    def hasNext(self) -> bool:
        """
        @return whether we have a next smallest number
        """
        if self.iterator == len(self.output):
            return False
        return True


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator:

    def __init__(self, root: TreeNode):
        
        self.stack = []
        self.inorder(root)
    def inorder(self, root):
        while root:
            self.stack.append(root)
            root = root.left
        
        
    def next(self) -> int:
        """
        @return the next smallest number
        """
        value = self.stack.pop()
        if value.right:
            self.inorder(value.right)
        return value.val
        

    def hasNext(self) -> bool:
        """
        @return whether we have a next smallest number
        """
        if not self.stack:
            return False
        return True

# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
