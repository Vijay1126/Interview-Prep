# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        def helper(node):
            if node is None:
                result.append('null')
            else:
                
                result.append(node.val)
                helper(node.left)
                helper(node.right)
        result = []
        helper(root)
        return result
                

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        output = []
        
        
        :type data: str
        :rtype: TreeNode
        """

        def helper(data):

            if data and data[0]!='null':
                root = TreeNode(data.pop(0))
                root.left = helper(data)
                root.right = helper(data)
                return root
            elif data:
                data.pop(0)
                return None

        return helper(data)
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
